// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kDebugMode, kIsWeb;
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:take_save_display_12/App/Views/Home/Notification/screenNotification.dart';
import 'package:take_save_display_12/main.dart';
import 'package:vibration/vibration.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyC9GF_dSXbUMnmjbm4b7mXjO9firwOGGTs',
    appId: '1:1051605559448:android:9b8093804229610e8a88ed',
    messagingSenderId: '1051605559448',
    projectId: 'moon-school-37b5d',
    storageBucket: 'moon-school-37b5d.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyAxQPB0SwF1YY-fSOIESYS9boRkLHx6MGU',
    appId: '1:1051605559448:ios:d2f6a1807adcd4b28a88ed',
    messagingSenderId: '1051605559448',
    projectId: 'moon-school-37b5d',
    storageBucket: 'moon-school-37b5d.appspot.com',
    iosBundleId: 'com.oppkey.takeSaveDisplay12',
  );
}

Future<void> firebasemessagingbackgoudhandler(RemoteMessage message) async {
  // notifications = notificationList.read("list");
  // notifications.add(
  //   NotificationItem(
  //       title: "${message.notification!.title}",
  //       message: "${message.notification!.body}"),
  // );
  // notificationList.write("list", notifications);
  Vibration.vibrate(duration: 1000);

  print(
      'title back : ${message.notification!.title} | body: ${message.notification!.body}');
}

voidrequiestPermesion() async {
  FirebaseMessaging messaging = FirebaseMessaging.instance;
  NotificationSettings settings = NotificationSettings(
      alert: AppleNotificationSetting.enabled,
      announcement: AppleNotificationSetting.disabled,
      authorizationStatus: AuthorizationStatus.authorized,
      badge: AppleNotificationSetting.enabled,
      carPlay: AppleNotificationSetting.disabled,
      lockScreen: AppleNotificationSetting.enabled,
      notificationCenter: AppleNotificationSetting.enabled,
      showPreviews: AppleShowPreviewSetting.always,
      timeSensitive: AppleNotificationSetting.enabled,
      criticalAlert: AppleNotificationSetting.enabled,
      sound: AppleNotificationSetting.enabled);

  if (settings.authorizationStatus == AuthorizationStatus.authorized) {
    print("User Grind Permision");
  }

  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    print(
        'title: ${message.notification!.title} | body: ${message.notification!.body}');
    Get.snackbar(
        "${message.notification!.title}", "${message.notification!.body}");
    Vibration.vibrate(duration: 1000);
    notifications = notificationList.read("list");
    notifications.add(
      NotificationItem(
          title: "${message.notification!.title}",
          message: "${message.notification!.body}"),
    );
    // notificationList.write("list", notifications);
  });
}
